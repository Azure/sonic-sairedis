#include "syncd.h"

std::vector<std::string> initCounterNameVector();

std::vector<std::string> g_counterNameVector = initCounterNameVector();

std::vector<std::string> initCounterNameVector()
{
    std::vector<std::string> v;

    v.resize(SAI_PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS + 1);

    #define ENTRY(x) v[x] = std::string( #x )

    ENTRY(SAI_PORT_STAT_IF_IN_OCTETS);
    ENTRY(SAI_PORT_STAT_IF_IN_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IF_IN_NON_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IF_IN_DISCARDS);
    ENTRY(SAI_PORT_STAT_IF_IN_ERRORS);
    ENTRY(SAI_PORT_STAT_IF_IN_UNKNOWN_PROTOS);
    ENTRY(SAI_PORT_STAT_IF_IN_BROADCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IF_IN_MULTICAST_PKTS);
    ENTRY(SAI_PORT_STAT_IF_IN_VLAN_DISCARDS);
    ENTRY(SAI_PORT_STAT_IF_OUT_OCTETS);
    ENTRY(SAI_PORT_STAT_IF_OUT_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IF_OUT_NON_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IF_OUT_DISCARDS);
    ENTRY(SAI_PORT_STAT_IF_OUT_ERRORS);
    ENTRY(SAI_PORT_STAT_IF_OUT_QLEN);
    ENTRY(SAI_PORT_STAT_IF_OUT_BROADCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IF_OUT_MULTICAST_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_DROP_EVENTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_MULTICAST_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_BROADCAST_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_FRAGMENTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_64_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_OVERSIZE_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_RX_OVERSIZE_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_TX_OVERSIZE_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_JABBERS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_PKTS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_COLLISIONS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_TX_NO_ERRORS);
    ENTRY(SAI_PORT_STAT_ETHER_STATS_RX_NO_ERRORS);
    ENTRY(SAI_PORT_STAT_IP_IN_RECEIVES);
    ENTRY(SAI_PORT_STAT_IP_IN_OCTETS);
    ENTRY(SAI_PORT_STAT_IP_IN_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IP_IN_NON_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IP_IN_DISCARDS);
    ENTRY(SAI_PORT_STAT_IP_OUT_OCTETS);
    ENTRY(SAI_PORT_STAT_IP_OUT_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IP_OUT_NON_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IP_OUT_DISCARDS);
    ENTRY(SAI_PORT_STAT_IPV6_IN_RECEIVES);
    ENTRY(SAI_PORT_STAT_IPV6_IN_OCTETS);
    ENTRY(SAI_PORT_STAT_IPV6_IN_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IPV6_IN_NON_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IPV6_IN_MCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IPV6_IN_DISCARDS);
    ENTRY(SAI_PORT_STAT_IPV6_OUT_OCTETS);
    ENTRY(SAI_PORT_STAT_IPV6_OUT_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IPV6_OUT_NON_UCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IPV6_OUT_MCAST_PKTS);
    ENTRY(SAI_PORT_STAT_IPV6_OUT_DISCARDS);
    ENTRY(SAI_PORT_STAT_GREEN_DISCARD_DROPPED_PACKETS);
    ENTRY(SAI_PORT_STAT_GREEN_DISCARD_DROPPED_BYTES);
    ENTRY(SAI_PORT_STAT_YELLOW_DISCARD_DROPPED_PACKETS);
    ENTRY(SAI_PORT_STAT_YELLOW_DISCARD_DROPPED_BYTES);
    ENTRY(SAI_PORT_STAT_RED_DISCARD_DROPPED_PACKETS);
    ENTRY(SAI_PORT_STAT_RED_DISCARD_DROPPED_BYTES);
    ENTRY(SAI_PORT_STAT_DISCARD_DROPPED_PACKETS);
    ENTRY(SAI_PORT_STAT_DISCARD_DROPPED_BYTES);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_64_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_64_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS);
    ENTRY(SAI_PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS);

    return v;
}

std::string getCounterName(sai_port_stat_counter_t counter)
{
    if (counter < g_counterNameVector.size())
        return g_counterNameVector[counter];

    // TODO exit here ?
    return std::to_string(counter);
}

sai_port_stat_counter_t collectCountersIds[] = {
    SAI_PORT_STAT_IF_IN_OCTETS,
    SAI_PORT_STAT_IF_IN_UCAST_PKTS,
    SAI_PORT_STAT_IF_IN_NON_UCAST_PKTS,
    SAI_PORT_STAT_IF_IN_DISCARDS,
    SAI_PORT_STAT_IF_IN_ERRORS,
    SAI_PORT_STAT_IF_IN_UNKNOWN_PROTOS,
    SAI_PORT_STAT_IF_IN_BROADCAST_PKTS,
    SAI_PORT_STAT_IF_IN_MULTICAST_PKTS,
    SAI_PORT_STAT_IF_IN_VLAN_DISCARDS,
    SAI_PORT_STAT_IF_OUT_OCTETS,
    SAI_PORT_STAT_IF_OUT_UCAST_PKTS,
    SAI_PORT_STAT_IF_OUT_NON_UCAST_PKTS,
    SAI_PORT_STAT_IF_OUT_DISCARDS,
    SAI_PORT_STAT_IF_OUT_ERRORS,
    SAI_PORT_STAT_IF_OUT_QLEN,
    SAI_PORT_STAT_IF_OUT_BROADCAST_PKTS,
    SAI_PORT_STAT_IF_OUT_MULTICAST_PKTS,
    SAI_PORT_STAT_ETHER_STATS_DROP_EVENTS,
    SAI_PORT_STAT_ETHER_STATS_MULTICAST_PKTS,
    SAI_PORT_STAT_ETHER_STATS_BROADCAST_PKTS,
    SAI_PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS,
    SAI_PORT_STAT_ETHER_STATS_FRAGMENTS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_64_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_OVERSIZE_PKTS,
    SAI_PORT_STAT_ETHER_RX_OVERSIZE_PKTS,
    SAI_PORT_STAT_ETHER_TX_OVERSIZE_PKTS,
    SAI_PORT_STAT_ETHER_STATS_JABBERS,
    SAI_PORT_STAT_ETHER_STATS_OCTETS,
    SAI_PORT_STAT_ETHER_STATS_PKTS,
    SAI_PORT_STAT_ETHER_STATS_COLLISIONS,
    SAI_PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS,
    SAI_PORT_STAT_ETHER_STATS_TX_NO_ERRORS,
    SAI_PORT_STAT_ETHER_STATS_RX_NO_ERRORS,
    SAI_PORT_STAT_IP_IN_RECEIVES,
    SAI_PORT_STAT_IP_IN_OCTETS,
    SAI_PORT_STAT_IP_IN_UCAST_PKTS,
    SAI_PORT_STAT_IP_IN_NON_UCAST_PKTS,
    SAI_PORT_STAT_IP_IN_DISCARDS,
    SAI_PORT_STAT_IP_OUT_OCTETS,
    SAI_PORT_STAT_IP_OUT_UCAST_PKTS,
    SAI_PORT_STAT_IP_OUT_NON_UCAST_PKTS,
    SAI_PORT_STAT_IP_OUT_DISCARDS,
    SAI_PORT_STAT_IPV6_IN_RECEIVES,
    SAI_PORT_STAT_IPV6_IN_OCTETS,
    SAI_PORT_STAT_IPV6_IN_UCAST_PKTS,
    SAI_PORT_STAT_IPV6_IN_NON_UCAST_PKTS,
    SAI_PORT_STAT_IPV6_IN_MCAST_PKTS,
    SAI_PORT_STAT_IPV6_IN_DISCARDS,
    SAI_PORT_STAT_IPV6_OUT_OCTETS,
    SAI_PORT_STAT_IPV6_OUT_UCAST_PKTS,
    SAI_PORT_STAT_IPV6_OUT_NON_UCAST_PKTS,
    SAI_PORT_STAT_IPV6_OUT_MCAST_PKTS,
    SAI_PORT_STAT_IPV6_OUT_DISCARDS,
    //SAI_PORT_STAT_GREEN_DISCARD_DROPPED_PACKETS,
    //SAI_PORT_STAT_GREEN_DISCARD_DROPPED_BYTES,
    //SAI_PORT_STAT_YELLOW_DISCARD_DROPPED_PACKETS,
    //SAI_PORT_STAT_YELLOW_DISCARD_DROPPED_BYTES,
    //SAI_PORT_STAT_RED_DISCARD_DROPPED_PACKETS,
    //SAI_PORT_STAT_RED_DISCARD_DROPPED_BYTES,
    //SAI_PORT_STAT_DISCARD_DROPPED_PACKETS,
    //SAI_PORT_STAT_DISCARD_DROPPED_BYTES,
    SAI_PORT_STAT_ETHER_IN_PKTS_64_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS,
    SAI_PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_64_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS,
    SAI_PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS,
};

void collectCounters(swss::Table &countersTable)
{
    std::lock_guard<std::mutex> lock(g_mutex);

    SWSS_LOG_ENTER();

    SWSS_LOG_TIMER("get counters");

    uint32_t countersSize = sizeof(collectCountersIds) / sizeof(SAI_PORT_STAT_IF_IN_OCTETS);

    std::vector<uint64_t> counters;

    counters.resize(countersSize);

    auto ports = saiGetPortList();

    for (auto &portId: ports)
    {
        sai_status_t status = sai_port_api->get_port_stats(portId, collectCountersIds, countersSize, counters.data());

        if (status != SAI_STATUS_SUCCESS)
        {
            SWSS_LOG_ERROR("failed to collect counters for port %llx: %d", portId, status);
            return;
        }

        std::string strPortId;
        sai_serialize_primitive(portId, strPortId);

        std::vector<swss::FieldValueTuple> values;

        for (size_t idx = 0; idx < counters.size(); idx++)
        {
            std::string field = getCounterName(collectCountersIds[idx]);
            std::string value = std::to_string(counters[idx]);

            swss::FieldValueTuple fvt(field, value);
            
            values.push_back(fvt);
        }

        countersTable.set(strPortId, values, "");
    }
}

static volatile bool  g_runCountersThread = false;
static std::shared_ptr<std::thread> g_countersThread = NULL;

void collectCountersThread()
{
    SWSS_LOG_ENTER();

    swss::DBConnector db(COUNTERS_DB, "localhost", 6379, 0);
    swss::Table countersTable(&db, "COUNTERS");

    while(g_runCountersThread)
    {
        collectCounters(countersTable);

        // collect counters every second
        sleep(1);
    }
}

void startCountersThread()
{
    SWSS_LOG_ENTER();

    g_runCountersThread = true;

    g_countersThread = std::shared_ptr<std::thread>(new std::thread(collectCountersThread));
}

void endCountersThread()
{
    SWSS_LOG_ENTER();

    g_runCountersThread = false;

    if (g_countersThread != NULL)
    {
        g_countersThread->join();
    }
}
