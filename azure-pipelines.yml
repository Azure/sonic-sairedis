# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - "*"
jobs:
- job:
  displayName: "amd64"
  pool:
    vmImage: 'ubuntu-20.04'

  container:
    image: sonicdev-microsoft.azurecr.io:443/sonic-slave-buster:latest

  steps:
  - script: |
      sudo apt-get install -qq -y \
        qtbase5-dev \
        libdbus-glib-1-2 \
        libdbus-glib-1-dev \
        libpcsclite-dev \
        docbook-to-man \
        docbook-utils \
        aspell-en \
        libhiredis0.14 \
        libhiredis-dev \
        libnl-3-dev \
        libnl-genl-3-dev \
        libnl-route-3-dev \
        libnl-nf-3-dev \
        libnl-cli-3-dev \
        swig3.0 \
        libpython2.7-dev \
        libzmq5 libzmq3-dev \
        libboost-all-dev

      sudo apt-get install -y redis-server
      sudo sed -ri 's/^# unixsocket/unixsocket/' /etc/redis/redis.conf
      sudo sed -ri 's/^unixsocketperm .../unixsocketperm 777/' /etc/redis/redis.conf
      sudo sed -ri 's/redis-server.sock/redis.sock/' /etc/redis/redis.conf
      sudo service redis-server start

      sudo apt-get install -y rsyslog
      sudo service rsyslog start

    displayName: "Install dependencies"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 9
      artifacts: sonic-swss-common
    displayName: "Download sonic swss common deb packages"
  - script: |
      sudo dpkg -i sonic-swss-common/libswsscommon_1.0.0_amd64.deb
      sudo dpkg -i sonic-swss-common/libswsscommon-dev_1.0.0_amd64.deb
    workingDirectory: $(Pipeline.Workspace)
    displayName: "Install sonic swss Common"
  - checkout: self
    submodules: true
  - script: |
      ./autogen.sh
      fakeroot dpkg-buildpackage -b -us -uc -Tbinary-syncd-vs
      cp ../*.deb .
    displayName: "Compile sonic sairedis"
  - script: |
      make check || true
    displayName: "Run sonic sairedis unit tests"
  - publish: $(System.DefaultWorkingDirectory)/
    artifact: sonic-sairedis
    displayName: "Archive sonic sairedis debian packages"

  - script: |
      ls -al /var/log/
    displayName: "List /var/log"
    condition: always()
  - task: CopyFiles@2
    displayName: "Copy syslog to staging directory"
    condition: always()
    inputs:
        contents: /var/log/*
        targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    displayName: "Publish syslog artifacts"
    condition: always()
    inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: sonic-sairedis.syslog
