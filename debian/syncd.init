#!/bin/bash

### BEGIN INIT INFO
# Provides:          syncd
# Required-Start:
# Required-Stop:
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: SONiC sync daemon
# Description:       Enable service syncd.
### END INIT INFO

DAEMON_SYNCD=/usr/bin/syncd

# dsserve: domain socket server for stdio
DAEMON_DSSERVE=/usr/bin/dsserve
DAEMON_DSSERVE_ARGS="-d $DAEMON_SYNCD --diag"
ENABLE_SAITHRIFT=0
HWSKU_DIR=/usr/share/sonic/hwsku

if [ -x $DAEMON_DSSERVE ]; then
    DAEMON=$DAEMON_DSSERVE
    DAEMON_ARGS=$DAEMON_DSSERVE_ARGS
else
    DAEMON=$DAEMON_SYNCD
fi

parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

start_bcm()
{
    [ -e /dev/linux-bcm-knet ] || mknod /dev/linux-bcm-knet c 122 0
    [ -e /dev/linux-user-bde ] || mknod /dev/linux-user-bde c 126 0
    [ -e /dev/linux-kernel-bde ] || mknod /dev/linux-kernel-bde c 127 0
}

start_mlnx()
{
    [ -e /dev/sxdevs/sxcdev ] || ( mkdir -p /dev/sxdevs && mknod /dev/sxdevs/sxcdev c 231 193 )

    # Read MAC address and align the last 6 bits.
    MAC_ADDRESS=`ip link show eth0 | grep ether | awk '{print $2}'`
    last_byte=`python -c "print '$MAC_ADDRESS'[-2:]"`
    aligned_last_byte=`python -c "print format(int(int('$last_byte', 16) & 0b11000000), '02x')"`  # put mask and take away the 0x prefix
    ALIGNED_MAC_ADDRESS=`python -c "print '$MAC_ADDRESS'[:-2] + '$aligned_last_byte'"`          # put aligned byte into the end of MAC

    # Write MAC address into /tmp/profile file.
    cat $HWSKU_DIR/sai.profile > /tmp/sai.profile
    echo "DEVICE_MAC_ADDRESS=$ALIGNED_MAC_ADDRESS" >> /tmp/sai.profile
}

start_centec()
{
    [ -e /dev/linux_dal ] || mknod /dev/linux_dal c 198 0
    [ -e /dev/net/tun ] || ( mkdir -p /dev/net && mknod /dev/net/tun c 10 200 )

    # Read MAC address and align the last 6 bits.
    MAC_ADDRESS=`ip link show eth0 | grep ether | awk '{print $2}'`
    last_byte=`python -c "print '$MAC_ADDRESS'[-2:]"`
    aligned_last_byte=`python -c "print format(int(int('$last_byte', 16) & 0b11000000), '02x')"`  # put mask and take away the 0x prefix
    ALIGNED_MAC_ADDRESS=`python -c "print '$MAC_ADDRESS'[:-2] + '$aligned_last_byte'"`          # put aligned byte into the end of MAC

    # Write MAC address into /tmp/profile file.
    cat $HWSKU_DIR/sai.profile > /tmp/sai.profile
    echo "DEVICE_MAC_ADDRESS=$ALIGNED_MAC_ADDRESS" >> /tmp/sai.profile
}

start_cavium()
{
    export XP_ROOT=/usr/bin/
}

case "$1" in
start)
    eval $(parse_yaml /etc/sonic/sonic_version.yml "sonic_")

    if [ $sonic_asic_type == "broadcom" ]; then
        start_bcm
        DAEMON_ARGS+=" -p $HWSKU_DIR/sai.profile "
    elif [ $sonic_asic_type == "mellanox" ]; then
        start_mlnx
        DAEMON_ARGS+=" -p /tmp/sai.profile "
    elif [ $sonic_asic_type == "cavium" ]; then
        DAEMON_ARGS+=" -p $HWSKU_DIR/sai.profile "
        start_cavium
    elif [ $sonic_asic_type == "centec" ]; then
        start_centec
        DAEMON_ARGS+=" -p /tmp/sai.profile "
    else
        echo "Unknown asic type $sonic_asic_type"
        exit 1
    fi

    if [ ${ENABLE_SAITHRIFT} == 1 ]; then
        DAEMON_ARGS+=" -r -m $HWSKU_DIR/port_config.ini"
    fi

    [ -r $HWSKU_DIR/syncd.conf ] && . $HWSKU_DIR/syncd.conf

    start-stop-daemon --start --quiet --exec $DAEMON -- $DAEMON_ARGS
    ;;
stop)
    start-stop-daemon --stop --quiet --exec $DAEMON
    ;;
*)
    echo "Usage: service syncd {start|stop}"
    exit 1
    ;;
esac

exit 0
